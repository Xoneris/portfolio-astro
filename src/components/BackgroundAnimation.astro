---
---
<div class="relative min-h-screen grow flex justify-center items-center" id="BlockContainer"> 
    <slot/>
</div>

<style>
    @keyframes movingUp {
        0% {
            bottom: -150px;
        }
        100% {
            bottom: -40px;
        }
    }

    @keyframes rotating {
        0% {
            transform: rotate(0);
            
        }
        100% {
            transform: rotate(360deg);
            bottom: 100%;
            opacity: 0;
        }
    }

    @keyframes rotating_back {
        0% {
            transform: rotate(0);
            
        }
        100% {
            transform: rotate(-360deg);
            bottom: 100%;
            opacity: 0;
        }
    }

    @keyframes plop {
        0% {
            transform: scale(0.5);            
        }
        100% {
            transform: scale(1.4);
            border-radius: 9999px;
            opacity: 0;
        }
    }
</style>

<script>
    import technologies from "../tech.json"

    let interval:any 
    let intervalRunning:boolean = false
    let windowWidth = window.innerWidth

    window.addEventListener("resize", () => {
        windowWidth = window.innerWidth
    })

    function startInterval() {
        if(!intervalRunning) {

            let intervalDuration:number = 0

            if(windowWidth <= 500) {
                intervalDuration = 750
            } else if(windowWidth >= 2000) {
                intervalDuration = 250
            } else {
                intervalDuration = 500
            }

            interval = setInterval(() => createNewBlock(), intervalDuration)
            intervalRunning = true
        }
    }

    function stopInterval() {
        if(intervalRunning) {
            clearInterval(interval)
            intervalRunning = false
        }
    }

    function getCurrentCSSProperties(newBlock:any) {

        const computedStyle:CSSStyleDeclaration = window.getComputedStyle(newBlock);

        // Get the current transform property (if it exists)
        const transform:any = computedStyle.transform;

        // Default values
        let currentBottom:string = computedStyle.bottom
        let currentOpacity:string = computedStyle.opacity
        let currentRotation:number = 0;

        // Parse the 'transform' matrix to extract rotation
        if (transform && transform !== 'none') {
            const matrixValues = transform.match(/matrix\(([^)]+)\)/)[1].split(', ');

            // Extract the matrix components for rotation calculation
            const a = parseFloat(matrixValues[0]); // cos(theta)
            const b = parseFloat(matrixValues[1]); // sin(theta)

            // Calculate the rotation in degrees
            currentRotation = Math.round(Math.atan2(b, a) * (180 / Math.PI));
            if (currentRotation < 0) {
            currentRotation += 360; // Normalize to 0-360 degrees
            }
        }

        return {
            bottom: currentBottom,
            opacity: currentOpacity,
            rotation: currentRotation
        }
    }

    function createNewBlock() {
        const BlockContainer = document.getElementById("BlockContainer")
        const newBlock = document.createElement("div");

        let randomSize:number
        if (windowWidth <= 500) {
            randomSize = Math.round(Math.random() * (100 - 50) + 50)
        } else {
            randomSize = Math.round(Math.random() * (150 - 50) + 50)
        }
        const randomStart = Math.round(Math.random() * (windowWidth - 0) + 0)
        const randomOpacity = Math.round(Math.random() * (75 - 25) + 25)
        const randomDelay = Math.round(Math.random() * (5 - 1) + 1)
        const randomDuration = Math.round(Math.random() * (15 - 5) + 5)
        const randomBorderRadius = Math.round(Math.random() * (15 - 5) + 5)

        // const randomLogo = Math.round(Math.random() * technologies.length) + 1

        newBlock.style.position = "fixed"
        newBlock.style.bottom = "-40px"
        newBlock.style.border = "1px solid white"
        newBlock.style.boxShadow = "0 0 15px white"
        newBlock.style.backgroundColor = "#64748b"
        newBlock.style.width = randomSize+"px"
        newBlock.style.height = randomSize+"px"
        newBlock.style.left = randomStart+"px"
        newBlock.style.opacity = randomOpacity+"%"
        newBlock.style.borderRadius = randomBorderRadius+"px"

        // newBlock.style.backgroundImage = "url('/icons/"+technologies[randomLogo].Logo+"')"
        // newBlock.style.backgroundRepeat = "no-repeat"
        // newBlock.style.backgroundPosition = "center"
        // newBlock.style.backgroundSize = "contain"

        newBlock.style.animationName = "movingUp";
        newBlock.style.animationTimingFunction = "linear"
        newBlock.style.animationFillMode = "both"
        newBlock.style.animationDuration = "1.5s"

        BlockContainer?.appendChild(newBlock)

        newBlock.addEventListener("animationend", () => {

            const randomOfTwo = Math.round(Math.random() * 1) + 1
            if (randomOfTwo === 1){

                newBlock.style.animationName = "rotating"
            } else if (randomOfTwo === 2) {

                newBlock.style.animationName = "rotating_back"
            }

            newBlock.style.animationTimingFunction = "linear"
            newBlock.style.animationFillMode = "forwards"
            newBlock.style.animationDelay = randomDelay+"s"
            newBlock.style.animationDuration = randomDuration+"s"

            newBlock.addEventListener("click", () => {
                
                newBlock.style.animationPlayState = "paused"

                const { bottom, opacity, rotation } = getCurrentCSSProperties(newBlock);
                newBlock.style.bottom = bottom
                newBlock.style.opacity = opacity
                newBlock.style.rotate = rotation+"deg"

                new Audio("/plop-sound.mp3").play()
                newBlock.style.animationName = "plop"
                newBlock.style.animationTimingFunction = "linear"
                newBlock.style.animationFillMode = "both"
                newBlock.style.animationDuration = "0.2s"
                newBlock.style.animationDelay = "0s"
                
                newBlock.style.animationPlayState = "running"

                newBlock.addEventListener("animationend", () => {
                    newBlock.remove()
                })
            }, {once: true})
            newBlock.addEventListener("animationend", () => {
                newBlock.remove()
            })
        })
    }

    document.addEventListener("visibilitychange", () => {
        if (document.hidden) {
            stopInterval()
        } else {
            startInterval()
        }
    })

    startInterval()


</script>
---
import { Image } from 'astro:assets';

interface Props {
	title: string;
    slug: any;
    image: string;
	description: string;
    stack: Array<string>
	github: string;
    demo: string;
    wip: string|undefined;
}

const {title, slug, image, description, stack, wip} = Astro.props;
---

<div class="flex flex-col  lg:w-2/5 w-full justify-between bg-slate-900 hide project border rounded-xl mb-12 ">
    <p class="font-bold text-2xl text-center p-2">{title}</p>
    <div class=" rounded-xl border m-2 relative transition-all hover:scale-110 hover:-rotate-3">
        <a href={"/"+slug}>
            {
                wip === "yes"
                ? <div class="absolute top-0 right-0 p-1 w-36 h-9 mt-1 mr-1 bg-red-600 bg-opacity-60 rounded-lg flex justify-center items-center text-white ">
                    Work in Progress
                </div>
                : null
            }
            <Image src={"/projects/"+image} alt={slug} width={720} height={540} class="rounded-xl w-full">
        </a>
    </div> 
    <div class="flex flex-col justify-between items-center p-2 w-full rounded-xl h-full project-description">
        <p class="p-4 text-center">{description}</p>
        <div class="flex flex-col sm:flex-row gap-2 sm:gap-0 w-full justify-around items-center pt-2">
            <div class="flex items-center gap-2 rounded border p-2 bg-slate-800">
                {stack.map((tech) => (
                    <Image src={"/icons/"+tech+".svg"} alt={tech} width={24} height={24} title={tech}/>
                ))}
            </div>
            <p><a href={"/"+slug} ><button class="border rounded p-2 bg-slate-800 hover:bg-slate-700">Learn More!</button></a></p>
        </div>
    </div>
</div>

<style>

    .project-image-background {
        overflow: auto;
        position: relative;
    }

    .hide {
		opacity: 0;
		transform: translateX(-100%);
		transition: all 1s;
	}

	.show {
		opacity: 1;
		transform: translateX(0);
		transition: all 1s;
	}

</style>

<script>

    const projectDescription = document.querySelectorAll("div.project-description")
    projectDescription.forEach((click) => {
        click.addEventListener('click', () => {
            
            if(click.classList.contains("project-desc-show") && window.innerWidth >= 1023){
                click.classList.remove("project-desc-show")
            } else if(window.innerWidth >= 1023) {
                click.classList.add("project-desc-show")
            }

        })
    })

	const observer = new IntersectionObserver((entries) => {
		entries.forEach((entry) => {
			if (entry.isIntersecting) {
				entry.target.classList.add("show")
			}
			// else {
			// 	entry.target.classList.remove("show")
			// }
		})
	})
	const hiddenElements = document.querySelectorAll(".hide");
	hiddenElements.forEach((el) => observer.observe(el))

</script>
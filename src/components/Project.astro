---
import { Image } from 'astro:assets';

interface Props {
	title: string;
    image: string;
	description: string;
    stack: Array<string>
	github: string;
    demo: string;

}

const {title, image, description, stack, github, demo} = Astro.props;
---

<div class="flex justify-between w-full mt-2 mb-2 relative hide project flex-col lg:flex-row border rounded-xl lg:border-0 ">
    <div class="w-full lg:w-1/2 rounded-xl z-10 border-0 lg:border ">
        <Image src={"/projects/"+image} alt="Metroidvania.GG" width={720} height={540} class="rounded-xl m-auto z-50 w-full">
    </div> 
    <div class="flex flex-col justify-between items-center p-2 pl-2 w-full lg:w-1/2 rounded-xl bg-slate-900 h-full static lg:absolute border-0 lg:border lg:-skew-x-6 lg:*:skew-x-6 project-description">
        <p class="font-bold text-2xl ">{title}</p>
        <p class="">{description}</p>
        <div class="flex items-center">
            <p>Stack used: </p>
            {stack.map((tech) => (
                <Image src={"/icons/"+tech+".svg"} alt={tech} width={48} height={48} title={tech} class="p-2"/>
            ))}
        </div>
        <div class="flex w-full justify-center items-center">
            <p><a href={github} target="_blank"><button class="border rounded ml-2 p-2 bg-slate-800 hover:bg-slate-700">Inspect the Code!</button></a></p>
            {demo !== "none" ? <p><a href={demo} target="_blank"><button class="border rounded ml-2 p-2 bg-slate-800 hover:bg-slate-700">See it Live!</button></a></p> : null }
        </div>
    </div>
</div>

<style>

    .project-description {
        left: 5%;
        /* padding-left: 6%; */
        transition: left 1s;
    }

    .project-description:hover {
        left: 45%;
    }

    .project-desc-show {
        left: 45%;
        box-shadow: 0 0 3px 1px orange;
        border-color: orange;
    }

    .project-image-background {
        overflow: auto;
        position: relative;
    }

    .hide {
		opacity: 0;
		transform: translateX(-100%);
		transition: all 1s;
	}

	.show {
		opacity: 1;
		transform: translateX(0);
		transition: all 1s;
	}

    @media (min-width: 1024px){
        .project-description {
        padding-left: 6%;
        }
    }
</style>

<script>

    const projectDescription = document.querySelectorAll("div.project-description")
    projectDescription.forEach((click) => {
        click.addEventListener('click', () => {
            
            if(click.classList.contains("project-desc-show") && window.innerWidth >= 1023){
                click.classList.remove("project-desc-show")
            } else if(window.innerWidth >= 1023) {
                click.classList.add("project-desc-show")
            }

        })
    })

	const observer = new IntersectionObserver((entries) => {
		entries.forEach((entry) => {
			if (entry.isIntersecting) {
				entry.target.classList.add("show")
			}
			// else {
			// 	entry.target.classList.remove("show")
			// }
		})
	})
	const hiddenElements = document.querySelectorAll(".hide");
	hiddenElements.forEach((el) => observer.observe(el))

</script>